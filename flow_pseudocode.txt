GENERAL NOTES:

MIDI message protocol, here are message contents:
1. ON/OFF: ON marks the start of playing the specific note, OFF marks when the note has finished being played
2. Note (by musical name of the note)
3. Velocity -> irrelevant in our case, as it pertains to the volume of the note

The melody will be stored as a series of notes in a note array. Each note will be represented as a struct, 
with the following elements: the note itself, which is represented as a number in MIDI data (e.g. 60 = C4), 
the start time of the note, and the end time of the note. The note number will be later converted to its 
frequency with a lookup table or helper function.

The MIDI keyboard does not have a speaker, meaning the note from a key won't be heard when it is pressed. This
means that we will need to output the note synchronously on a buzzer, so that the user can hear the notes they
are playing.

---------------------------------------------------------------------------------------------------------------

struct Note {
    int note_num;
    int start_t;
    int end_t; 
}

Note notes = {} // array storing the parsed notes of the melody

while (listening for MIDI input) { // TODO: serial communication details to be specified next week
    // input data variables
    curr_note = ... // TODO: figure out how data is read in (next week's goal)
    delta_time = ... // TODO: figure out how data is read in (next week's goal)

    if (ON is detected) { // either checking for non-zero velocity or status byte: 0x90
        notes.add({curr_note, delta_time, -1}); // end-time initialize as -1 because note has not finished playing
    } else if (OFF is detected) {
        for (traverse notes array backwards) {
            if (notes[i].note_num == curr_note && notes[i].end_t == -1) { // find first note that hasn't finished playing
                                                                          // and matches current note
                notes[i].end_t = delta_time // set end-time of that note to current time stamp (in terms of # of MIDI ticks)
            }
        }
    }
}
